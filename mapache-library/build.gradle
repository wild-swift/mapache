/*
 * Copyright (C) 2018 Wild Swift
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.library'

apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

group = 'name.wildswift.android'
version = publish_version

android {
    compileSdkVersion 29

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation 'androidx.annotation:annotation:1.1.0'
}

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            owner.classpath += variant.javaCompile.classpath
        }
    }
    exclude '**/R.html', '**/R.*.html', '**/index.html'
}

task javadocJar(type: Jar, dependsOn: androidJavadocs) {
    archiveClassifier = 'javadoc'
    from androidJavadocs.destinationDir
}

artifacts {
    archives sourcesJar, javadocJar
}

publishing {
    publications {
        Production(MavenPublication) {
            artifact("$buildDir/outputs/aar/mapache-library-release.aar")
            artifact sourcesJar
            artifact javadocJar

            groupId this.group
            artifactId 'mapache-library'
            version this.version

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                // Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.implementation.allDependencies.each {
                    // Ensure dependencies such as fileTree are not included in the pom.
                    if (it.name != 'unspecified') {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    publications = ['Production']
    pkg {
        repo = 'general'
        name = 'mapache-library'
        licenses = ['Apache-2.0']
        publish = true
        publicDownloadNumbers = true
        vcsUrl = 'https://github.com/wild-swift/mapache.git'
        version {
            name = publish_version
            desc = 'First alpha version'
            released = new Date()
            vcsTag = publish_version
        }
    }
}
project.afterEvaluate {
    bintrayUpload.dependsOn(assemble, javadocJar, sourcesJar)
    bintrayUpload.dependsOn "generatePomFileForProductionPublication"
}
